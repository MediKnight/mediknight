/*
 * @(#)$Id$
 *
 * (C)2000-2001 Baltic Online Computer GmbH
 */
package de.baltic_online.mediknight;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import de.baltic_online.mediknight.domain.Patient;
import de.baltic_online.mediknight.domain.User;
import de.baltic_online.mediknight.util.MediknightUtilities;


/**
 *
 */
public class PatientHistory {

    /**
     * Maximal size of the recent list (currently 10)
     */
    public final static int       MAXSIZE = 10;

    private final static String   KEY     = "patient.history";

    /**
     * here we save an instance of this class which will be generated by method <code>getInstance()</code> and returned by this method if it already exists
     *
     * @see getInstance()
     */
    private static PatientHistory instance;

    /**
     * the current user who is logged in
     */
    private static User	   user;

    static {
	user = MainFrame.getApplication().getUser();
	instance = new PatientHistory();
    }


    /**
     * This method returns the only instance of this class
     */
    public static PatientHistory getInstance() {
	return instance;
    }

    /**
     * The Container
     */
    private List< Patient > recents;


    private PatientHistory() {
	recents = new ArrayList< Patient >();
    }


    /**
     * Adds a patient to history.
     * <p>
     * <ul>
     * <li>A patient will allways be placed on the first position.
     * <li>A patient will be not added twice.
     * <li>The list will be truncated if the entries exeeds 10
     * </ul>
     */
    public void add( final Patient p ) throws SQLException {
	final int index = recents.indexOf( p );
	if( index != 0 ) {
	    if( index > 0 ) {
		recents.remove( index );
	    }
	    recents.add( 0, p );
	    if( recents.size() > MAXSIZE ) {
		recents.remove( MAXSIZE );
	    }
	}
	save();
    }


    /**
     * @return list of recent patients
     */
    public List< Patient > getList() {
	return recents;
    }


    /**
     * Retrieves history from Database
     */
    public List< Patient > load() throws SQLException {
	recents.clear();
	final Map< String, String > info = user.retrieveInformation();
	final String s = info.get( KEY );
	final int[] ids = MediknightUtilities.readCSV( s != null ? s : "" );
	for( int i = 0; i < ids.length && i < MAXSIZE; i++ ) {
	    try {
		final Patient p = Patient.retrieve( ids[i] );
		if( p != null ) {
		    recents.add( p );
		}
	    } catch( final NumberFormatException x ) { // shoul not happen
		x.printStackTrace();
	    }
	}
	return recents;
    }


    /**
     * Saves history and removes currently deleted patients from history list.
     */
    public void save() throws SQLException {
	// Removes currently deleted patients from list first.
	for( final Iterator< Patient > it = recents.iterator(); it.hasNext(); ) {
	    final Patient p = it.next();
	    final int id = p.getId();
	    if( Patient.retrieve( id ) == null ) {
		it.remove();
	    }
	}

	final int[] ids = new int[recents.size()];
	for( int i = 0; i < ids.length; i++ ) {
	    final Patient p = recents.get( i );
	    ids[i] = p.getId();
	}

	final Map< String, String > map = new Hashtable< String, String >();
	map.put( KEY, MediknightUtilities.writeCSV( ids ) );
	user.saveInformation( map );
    }


    public void setList( final List< Patient > newList ) throws SQLException {
	recents = newList;
	save();
    }
}
